`default_nettype none
`timescale 1ns/10ps

module control (instruction, branch, mem_read, mem_write, mem_to_reg, alu_op, alu_src, register_write);
    
    input instruction;
    output branch,
    mem_read,
    mem_write,
    mem_to_reg,
    [1:0]alu_op,
    alu_src,
    register_write;

    always @ (instruction)
    begin
        // branch instruction
        if ( instruction[6]==1 && instruction[5]==1 )
        begin
                branch=1;
                mem_read=0;
                mem_write=0;
                mem_to_reg=1'bx;
                alu_op=2'b01;
                alu_src=0;
                register_write=0;
        end

        else
        begin
            // ld instruction
            if (instruction[4]==0 && instruction[5]==0) 
            begin
                branch=0;
                mem_read=1;
                mem_write=0;
                mem_to_reg=1;
                alu_op=2'b00;
                alu_src=1;
                register_write=1;
            end

            else
            begin
                // sd instruction
                if (instruction[4]==0 && instruction[5]==1) 
                begin
                    branch=0;
                    mem_read=0;
                    mem_write=1;
                    mem_to_reg=1'bx;
                    alu_op=2'b00;
                    alu_src=1;
                    register_write=0;
                end
                else
                begin
                    // R type instruction
                    branch=0;
                    mem_read=0;
                    mem_write=0;
                    mem_to_reg=0;
                    alu_op=2'b10;
                    alu_src=0;
                    register_write=1;
                end
            end
        end
    end
endmodule