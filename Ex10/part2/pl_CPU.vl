`default_nettype none
`timescale 1ns/10ps

`include "PC.vl"
`include "IF_ID.vl"
`include "ID_EX.vl"
`include "EX_MEM.vl"
`include "MEM_WB.vl"
`include "instructionMemory.vl"
`include "fulladder.vl"
`include "multiplexer.vl"
`include "RegisterMemory.vl"
`include "ALU.vl"
`include "DataMemory.vl"
`include "control.vl"

module CPU;
    
    reg clk;
    reg E;

    reg [63:0]line;
    reg [95:0]IF_ID_out;
    reg [272:0]ID_EX_out;
    reg [203:0]EX_MEM_out;
    reg [135:0]MEM_WB_out;
    reg [63:0]ins_address;
    reg write_read_pc;

    reg [63:0]ins_address_next;
    reg Cout;

    reg [47:0]ins_in;
    reg write_read_im;
    reg [31:0]ins_out;

    reg branch,
    mem_read,
    mem_write,
    mem_to_reg,
    [1:0]alu_op,
    alu_src,
    register_write;

    reg [63:0]write_data;
    reg [63:0]read_data_1,
    [63:0]read_data_2;

    reg [63:0]imm_gen_out;

    reg [63:0]alu_in_2;
    
    reg [3:0]alu_control_input;

    reg [63:0]alu_result,
    flagC,
    flagZ;
    
    reg [63:0]branch_address_out;

    reg [63:0]data_memory_out;
    
    reg PCSrc;

    always
    begin
        clk = ~ clk;
        #100;
    end


    
    multiplexer pc_multiplexer (ins_address_next, branch_address_out, PCSrc, line);


    PC PC(clk, line, write_read_pc, E, ins_address);


    fulladder first_adder (
    .In1(ins_address),
    .In2 (4'b0100),
    .Cin (0),
    .Sum(ins_address_next),
    .Cout(Cout));


    instructionMemory instruction_memory(clk, ins_in, write_read_im, E, ins_address, ins_out);


    IF_ID IF_ID(clk, {ins_address, ins_out}, E, IF_ID_out);


    control control (IF_ID_out[0+:32],
    .branch(ID_EX_out[0]),
    .mem_read(ID_EX_out[1]),
    .mem_write(ID_EX_out[2]),
    .mem_to_reg(ID_EX_out[3]),
    .alu_op(ID_EX_out[4+:1]),
    .alu_src(ID_EX_out[6]),
    .register_write(ID_EX_out[7]));


    RegisterMemory RegisterMemory(clk, write_data, IF_ID_out[15+:5], IF_ID_out[20+:5],  register_write, E, IF_ID_out[7+:5], read_data_1, read_data_2);


    ImmGen ImmGen (IF_ID_out[0+:32], imm_gen_out);


    ID_EX ID_EX(clk,
    {IF_ID_out[7+:5], IF_ID_out[30], IF_ID_out[12+:3], imm_gen_out, read_data_2 , read_data_1, IF_ID_out[32+:64], register_write, alu_src, alu_op, mem_to_reg, mem_write, mem_read, branch},
    E, 
    ID_EX_out);


    multiplexer alu_multiplexer (
        .w0(ID_EX_out[136+:64]),
        .w1(ID_EX_out[200+:64]),
        .s(ID_EX_out[6]),
        .f(alu_in_2));
    

    AluControl AluControl (ID_EX_out[4+:1], ID_EX_out[267], ID_EX_out[266-:3], alu_control_input);


    ALU ALU (alu_control_input, ID_EX_out[72+:64], alu_in_2, alu_result, flagC, flagZ );


    fulladder second_adder(
        .In1(ID_EX_out[8+:64]),
        .In2(ID_EX_out[136+:64]),
        .Cin(0),
        .Sum.(branch_address_out),
        .Cout(Cout));


    EX_MEM EX_MEM(clk,
    {ID_EX_out[272-:5], ID_EX_out[136+:64], alu_result, flagZ, branch_address_out, EX_MEM[7], EX_MEM[0+:4]},
    E,
    EX_MEM_out);


    reg flagZ_and_branch = EX_MEM_out[0] & EX_MEM_out[69];


    DataMemory DataMemory(
    .clk(clk),
    .read_data_2(EX_MEM_out[134+:64]),
    .(mem_read)EX_MEM_out[1],
    .mem_write(EX_MEM_out[2]),
    .E(E),
    .alu_result(EX_MEM_out[70+:64]),
    .data_memory_out(data_memory_out));


    MEM_WB MEM_WB(clk,
    {EX_MEM_out[203-:5], EX_MEM_out[70+:64], data_memory_out, EX_MEM[7], EX_MEM[3]},
    E,
    MEM_WB_out);


    multiplexer register_file_multiplexer(
        .w0(MEM_WB_out[66+:64]),
        .w1(MEM_WB_out[2+:64]),
        .s(0),
        .f(write_data));

endmodule