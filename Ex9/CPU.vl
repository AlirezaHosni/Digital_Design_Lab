`default_nettype none
`timescale 1ns/10ps

`include "register.vl"
`include "instructionMemory.vl"
`include "fulladder.vl"
`include "multiplexer.vl"
`include "RegisterMemory.vl"
`include "ALU.vl"
`include "DataMemory.vl"
`include "control.vl"

module CPU;
    
    reg clk;
    reg E;

    reg line;
    reg ins_address;
    reg write_read_pc;

    reg ins_address_next;
    reg Cout;

    reg [47:0]ins_in;
    reg write_read_im;
    reg [31:0]ins_out;

    reg branch,
    mem_read,
    mem_write,
    mem_to_reg,
    [1:0]alu_op,
    alu_src,
    register_write;

    reg [63:0]write_data;
    reg [63:0]read_data_1,
    [63:0]read_data_2;

    reg [63:0]imm_gen_out;

    reg [63:0]alu_in_2;
    
    reg [3:0]alu_control_input;

    reg [63:0]alu_result,
    flagC,
    flagZ;
    
    reg [63:0]branch_address_out;

    reg [63:0]data_memory_out;
    

    always
    begin
        clk = ~ clk;
        #100;
    end

    register PC(clk, line, write_read_pc, E, ins_address);


    fulladder first_adder (
    .In1(ins_address),
    .In2 (4'b0100),
    .Cin (0),
    .Sum(ins_address_next),
    .Cout(Cout));


    instructionMemory instruction_memory(clk, ins_in, write_read_im, E, ins_address, ins_out);


    control control (ins_out, branch, mem_read, mem_write, mem_to_reg, alu_op, alu_src, register_write);


    RegisterMemory RegisterMemory(clk, write_data, ins_out[15+:19], ins_out[20+:24],  register_write, E, ins_out[7+:11], read_data_1, read_data_2);


    ImmGen ImmGen (ins_out, imm_gen_out);


    multiplexer alu_multiplexer (
        .w0(read_data_2),
        .w1(imm_gen_out),
        .s(alu_src),
        .f(alu_in_2));
    

    AluControl AluControl (alu_op, ins_out[30], ins_out[12+:14], alu_control_input);


    ALU ALU (alu_control_input, read_data_1, alu_in_2, alu_result, flagC, flagZ );


    fulladder second_adder(
        .In1(ins_address),
        .In2(imm_gen_out),
        .Cin(0),
        .Sum.(branch_address_out),
        .Cout(Cout));


    reg flagZ_and_branch = branch & flagZ;
    multiplexer pc_multiplexer (ins_address_next, branch_address_out, flagZ_and_branch, line);


    DataMemory DataMemory(clk, read_data_2, mem_read, mem_write, E, alu_result, data_memory_out);


    multiplexer register_file_multiplexer(alu_result, data_memory_out, mem_to_reg, write_data);

endmodule